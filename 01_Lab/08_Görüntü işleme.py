"""OpenGL (Open Graphics Library), 2D ve 3D grafiklerin Ã§izimi iÃ§in geliÅŸtirilmiÅŸ, platform ve dil baÄŸÄ±msÄ±z bir grafik APIâ€™sidir. Genellikle oyun motorlarÄ±nda, CAD programlarÄ±nda, simÃ¼lasyonlarda ve diÄŸer gÃ¶rsel uygulamalarda kullanÄ±lÄ±r.

ðŸ”¹ OpenGL Nedir?
1992â€™de Silicon Graphics Inc. (SGI) tarafÄ±ndan geliÅŸtirildi.

Grafik donanÄ±mÄ±ndan baÄŸÄ±msÄ±z olarak Ã§alÄ±ÅŸan, donanÄ±ma grafik Ã§izimi komutlarÄ± gÃ¶nderen bir arabirimdir.

C ve C++ dilleri ile sÄ±kÃ§a kullanÄ±lÄ±r.

GerÃ§ek zamanlÄ± render (anlÄ±k Ã§izim) saÄŸlar.

ðŸ§  OpenGL Ne Ä°ÅŸe Yarar?
3D nesneleri modellemek ve Ã§izmek

IÅŸÄ±klandÄ±rma, gÃ¶lgelendirme ve doku kaplama iÅŸlemleri

Kamerayla sahne gezdirme (view transformation)

2D oyunlar veya arayÃ¼zler Ã§izmek

GPU hÄ±zlandÄ±rmalÄ± grafik iÅŸlemleri yapmak






ðŸ§ª Basit OpenGL Uygulama Ã–rneÄŸi (C++ ile)
cpp
#include <GL/glut.h>
void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glBegin(GL_TRIANGLES);       // ÃœÃ§gen Ã§izmeye baÅŸla
        glColor3f(1.0, 0.0, 0.0);  // KÄ±rmÄ±zÄ± renk
        glVertex2f(-0.5, -0.5);    // Nokta 1
        glColor3f(0.0, 1.0, 0.0);  // YeÅŸil renk
        glVertex2f(0.5, -0.5);     // Nokta 2
        glColor3f(0.0, 0.0, 1.0);  // Mavi renk
        glVertex2f(0.0, 0.5);      // Nokta 3
    glEnd();
    glFlush();
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);                     // GLUT baÅŸlat
    glutCreateWindow("OpenGL ÃœÃ§gen");         // Pencere oluÅŸtur
    glutDisplayFunc(display);                 // Ã‡izim fonksiyonu ata
    glutMainLoop();                           // Sonsuz dÃ¶ngÃ¼
    return 0;
}

ðŸ“¦ OpenGL KullanÄ±m AlanlarÄ±:
Oyun GeliÅŸtirme: Unity veya Unreal dÄ±ÅŸÄ± motorlarda grafik Ã§izimi iÃ§in

Bilimsel SimÃ¼lasyonlar: MolekÃ¼ler modelleme, fizik simÃ¼lasyonlarÄ±

Veri GÃ¶rselleÅŸtirme: 3D grafiklerle veri analizi

EÄŸitim AmaÃ§lÄ± Projeler: Grafik dersi uygulamalarÄ±

GUI UygulamalarÄ±: Qt gibi kÃ¼tÃ¼phanelerle birlikte

ðŸ§© OpenGL Alternatifleri:
DirectX (Windowsâ€™a Ã¶zel)

Vulkan (dÃ¼ÅŸÃ¼k seviyeli, modern API)

Metal (Apple platformlarÄ± iÃ§in)

WebGL (Web tarayÄ±cÄ±larÄ±nda Ã§alÄ±ÅŸan OpenGL ES sÃ¼rÃ¼mÃ¼)"""

#......................................................................................
#Basit ÃœÃ§gen Ã‡izimi:
import pip


class PyOpenGL_accelerate:
    pass


PyOpenGL_accelerate
from OpenGL.GL import *
from OpenGL.GLUT import *
from OpenGL.GLU import *


def draw():
    glClear(GL_COLOR_BUFFER_BIT)
    glBegin(GL_TRIANGLES)
    glColor3f(1, 0, 0)  # KÄ±rmÄ±zÄ±
    glVertex2f(-0.5, -0.5)
    glColor3f(0, 1, 0)  # YeÅŸil
    glVertex2f(0.5, -0.5)
    glColor3f(0, 0, 1)  # Mavi
    glVertex2f(0.0, 0.5)
    glEnd()
    glFlush()


glutInit()
glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB)
glutInitWindowSize(500, 500)
glutCreateWindow("PyOpenGL ÃœÃ§gen")
glutDisplayFunc(draw)
glutMainLoop()
#----------------------------------------------------------------------
#3D Nesne: DÃ¶nen KÃ¼p (PyOpenGL ile)
from OpenGL.GL import *
from OpenGL.GLUT import *
from OpenGL.GLU import *

angle = 0


def draw():
    global angle
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
    glLoadIdentity()
    glTranslatef(0.0, 0.0, -5)
    glRotatef(angle, 1, 1, 0)

    glBegin(GL_QUADS)

    # Ã–n yÃ¼z (kÄ±rmÄ±zÄ±)
    glColor3f(1.0, 0.0, 0.0)
    glVertex3f(1.0, 1.0, -1.0)
    glVertex3f(-1.0, 1.0, -1.0)
    glVertex3f(-1.0, 1.0, 1.0)
    glVertex3f(1.0, 1.0, 1.0)

    # Arka yÃ¼z (yeÅŸil)
    glColor3f(0.0, 1.0, 0.0)
    glVertex3f(1.0, -1.0, 1.0)
    glVertex3f(-1.0, -1.0, 1.0)
    glVertex3f(-1.0, -1.0, -1.0)
    glVertex3f(1.0, -1.0, -1.0)

    # DiÄŸer yÃ¼zler...
    glColor3f(0.0, 0.0, 1.0)
    glVertex3f(-1.0, 1.0, 1.0)
    glVertex3f(-1.0, 1.0, -1.0)
    glVertex3f(-1.0, -1.0, -1.0)
    glVertex3f(-1.0, -1.0, 1.0)

    glColor3f(1.0, 1.0, 0.0)
    glVertex3f(1.0, 1.0, -1.0)
    glVertex3f(1.0, 1.0, 1.0)
    glVertex3f(1.0, -1.0, 1.0)
    glVertex3f(1.0, -1.0, -1.0)

    glColor3f(1.0, 0.0, 1.0)
    glVertex3f(1.0, 1.0, 1.0)
    glVertex3f(-1.0, 1.0, 1.0)
    glVertex3f(-1.0, -1.0, 1.0)
    glVertex3f(1.0, -1.0, 1.0)

    glColor3f(0.0, 1.0, 1.0)
    glVertex3f(1.0, -1.0, -1.0)
    glVertex3f(-1.0, -1.0, -1.0)
    glVertex3f(-1.0, 1.0, -1.0)
    glVertex3f(1.0, 1.0, -1.0)

    glEnd()

    glutSwapBuffers()
    angle += 1


def timer(value):
    glutPostRedisplay()
    glutTimerFunc(16, timer, 0)


def init():
    glEnable(GL_DEPTH_TEST)


glutInit()
glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH)
glutInitWindowSize(600, 600)
glutCreateWindow("3D DÃ¶nen KÃ¼p")
init()
glutDisplayFunc(draw)
glutTimerFunc(0, timer, 0)
glutMainLoop()

#----------------------------------------------------------------
#3D Nesne: KÃ¼re (GLU KÃ¼tÃ¼phanesi ile)
def draw_sphere():
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
    glLoadIdentity()
    glTranslatef(0.0, 0.0, -5.0)
    glColor3f(0.3, 0.6, 1.0)
    glutSolidSphere(1, 50, 50)
    glutSwapBuffers()

glutDisplayFunc(draw_sphere)
glutMainLoop()
#---------------------------------------------------------------------
#Åžimdi seni OpenGLâ€™in ileri dÃ¼zeyi olan Shader (GLSL), VBO (Vertex Buffer Object) ve VAO (Vertex Array Object) dÃ¼nyasÄ±na gÃ¶tÃ¼rÃ¼yorum. Bu yapÄ±larÄ±n hepsi modern OpenGLâ€™de performanslÄ± grafikler Ã§izmek iÃ§in kullanÄ±lÄ±r. ArtÄ±k sabit iÅŸlem hattÄ± (glBegin / glEnd) yerine programlanabilir pipeline kullanÄ±yoruz.Modern OpenGL'de Ã–nemli Kavramlar:

#Modern OpenGL'de Ã–nemli Kavramlar:

#Terim	AÃ§Ä±klama
#Shader	GPU Ã¼zerinde Ã§alÄ±ÅŸan mini programcÄ±klar. Genelde iki tÃ¼r: Vertex ve Fragment Shader.
#GLSL	OpenGL Shader Language (Câ€™ye benzer yapÄ±dadÄ±r).
#VBO	Vertex verilerini GPUâ€™ya aktarmak iÃ§in kullanÄ±lÄ±r.
#VAO	Birden fazla VBOâ€™yu tek bir yapÄ± iÃ§inde organize eder.
#Shader Pipeline	OpenGL iÅŸlemlerinin geÃ§tiÄŸi aÅŸamalÄ± yapÄ±.


#Shader ile ÃœÃ§gen (PyOpenGL + GLSL)
pip install PyOpenGL glfw
import glfw
from OpenGL.GL import *
import numpy as np

# Vertex Shader
VERTEX_SHADER = """
#version 330
layout(location = 0) in vec3 position;
void main()
{
    gl_Position = vec4(position, 1.0);
}
"""

# Fragment Shader
FRAGMENT_SHADER = """
#version 330
out vec4 FragColor;
void main()
{
    FragColor = vec4(1.0, 0.3, 0.6, 1.0); // Pembe renk
}
"""

def compile_shader(source, shader_type):
    shader = glCreateShader(shader_type)
    glShaderSource(shader, source)
    glCompileShader(shader)
    if not glGetShaderiv(shader, GL_COMPILE_STATUS):
        raise RuntimeError(glGetShaderInfoLog(shader))
    return shader

def create_shader_program():
    vertex = compile_shader(VERTEX_SHADER, GL_VERTEX_SHADER)
    fragment = compile_shader(FRAGMENT_SHADER, GL_FRAGMENT_SHADER)
    program = glCreateProgram()
    glAttachShader(program, vertex)
    glAttachShader(program, fragment)
    glLinkProgram(program)
    return program

def main():
    if not glfw.init():
        return

    window = glfw.create_window(800, 600, "Shader ile ÃœÃ§gen", None, None)
    glfw.make_context_current(window)

    triangle = np.array([
        -0.5, -0.5, 0.0,
         0.5, -0.5, 0.0,
         0.0,  0.5, 0.0
    ], dtype=np.float32)

    # VAO & VBO oluÅŸtur
    VAO = glGenVertexArrays(1)
    VBO = glGenBuffers(1)

    glBindVertexArray(VAO)
    glBindBuffer(GL_ARRAY_BUFFER, VBO)
    glBufferData(GL_ARRAY_BUFFER, triangle.nbytes, triangle, GL_STATIC_DRAW)

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, None)
    glEnableVertexAttribArray(0)

    shader = create_shader_program()
    glUseProgram(shader)

    while not glfw.window_should_close(window):
        glClearColor(0.1, 0.1, 0.1, 1.0)
        glClear(GL_COLOR_BUFFER_BIT)

        glBindVertexArray(VAO)
        glDrawArrays(GL_TRIANGLES, 0, 3)

        glfw.swap_buffers(window)
        glfw.poll_events()

    glfw.terminate()

if __name__ == "__main__":
    main()
#---------------------------------------------

#Shader ile 3D DÃ¶nen KÃ¼p
import glfw
from OpenGL.GL import *
from OpenGL.GL.shaders import compileProgram, compileShader
import numpy as np
import pyrr

VERTEX_SHADER = """
#version 330
layout(location = 0) in vec3 position;
uniform mat4 model;
uniform mat4 projection;
void main() {
    gl_Position = projection * model * vec4(position, 1.0);
}
"""

FRAGMENT_SHADER = """
#version 330
out vec4 FragColor;
void main() {
    FragColor = vec4(0.2, 0.8, 1.0, 1.0);  // Mavi ton
}
"""

vertices = [
    # Ã–n
    -1, -1,  1,
     1, -1,  1,
     1,  1,  1,
    -1,  1,  1,
    # Arka
    -1, -1, -1,
     1, -1, -1,
     1,  1, -1,
    -1,  1, -1,
]

indices = [
    0, 1, 2, 2, 3, 0,  # Ã–n
    4, 5, 6, 6, 7, 4,  # Arka
    0, 4, 7, 7, 3, 0,  # Sol
    1, 5, 6, 6, 2, 1,  # SaÄŸ
    3, 2, 6, 6, 7, 3,  # Ãœst
    0, 1, 5, 5, 4, 0   # Alt
]

vertices = np.array(vertices, dtype=np.float32)
indices = np.array(indices, dtype=np.uint32)

def main():
    if not glfw.init(): return
    window = glfw.create_window(800, 600, "DÃ¶nen KÃ¼p - Shader", None, None)
    glfw.make_context_current(window)

    shader = compileProgram(
        compileShader(VERTEX_SHADER, GL_VERTEX_SHADER),
        compileShader(FRAGMENT_SHADER, GL_FRAGMENT_SHADER)
    )

    VAO = glGenVertexArrays(1)
    VBO = glGenBuffers(1)
    EBO = glGenBuffers(1)

    glBindVertexArray(VAO)
    glBindBuffer(GL_ARRAY_BUFFER, VBO)
    glBufferData(GL_ARRAY_BUFFER, vertices.nbytes, vertices, GL_STATIC_DRAW)

    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO)
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.nbytes, indices, GL_STATIC_DRAW)

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, None)
    glEnableVertexAttribArray(0)

    glEnable(GL_DEPTH_TEST)

    while not glfw.window_should_close(window):
        glfw.poll_events()
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

        glUseProgram(shader)

        rotation = pyrr.Matrix44.from_y_rotation(glfw.get_time())
        projection = pyrr.matrix44.create_perspective_projection_matrix(45, 800 / 600, 0.1, 100)
        projection_location = glGetUniformLocation(shader, "projection")
        model_location = glGetUniformLocation(shader, "model")

        glUniformMatrix4fv(model_location, 1, GL_FALSE, rotation)
        glUniformMatrix4fv(projection_location, 1, GL_FALSE, projection)

        glBindVertexArray(VAO)
        glDrawElements(GL_TRIANGLES, len(indices), GL_UNSIGNED_INT, None)

        glfw.swap_buffers(window)

    glfw.terminate()

if __name__ == "__main__":
    main()
#-------------------------------------------------------------------
#Shader ile IÅŸÄ±klandÄ±rmalÄ± Sahne (Phong Lighting)
"""Bu Ã¶rnekle temel Ä±ÅŸÄ±klandÄ±rma (diffuse + ambient) uygulanmÄ±ÅŸ bir kÃ¼p gÃ¶stereceÄŸiz. IÅŸÄ±ÄŸÄ±n geliÅŸ yÃ¶nÃ¼ne gÃ¶re parlama efektleri gÃ¶receksin.

(Ä°stersen bu Ã¶rneÄŸi ayrÄ±ca hazÄ±rlayÄ±p gÃ¶nderebilirim. Ä°leri Ä±ÅŸÄ±klandÄ±rma iÃ§in vertex + fragment shader iÃ§inde normal hesaplarÄ± ve lightPos, viewPos tanÄ±mlarÄ± gerekir.)"""
# Mouse KontrollÃ¼ Kamera (FPS Stili)
"""FPS tarzÄ± bir kamera iÃ§in:

WASD hareket

Mouse ile bakÄ±ÅŸ yÃ¶nÃ¼ (yaw, pitch)

Kamera matrixâ€™ini view olarak shaderâ€™a gÃ¶nderme gerekir.

Bunun iÃ§in genellikle pyrr veya glm ile ÅŸu fonksiyonlar kullanÄ±lÄ±r:"""

view = pyrr.matrix44.create_look_at(camera_pos, camera_pos + camera_front, camera_up)
#----------------------------------------------------------------------------------------
#FPS (First Person Shooter)

"""FPS Kamera KontrolÃ¼ (Mouse + Klavye)
Bu sistemde:

WASD ile ilerle/geri/saÄŸ/sol hareket

Mouse ile kamera yÃ¶nÃ¼ deÄŸiÅŸir (saÄŸa-sola, yukarÄ±-aÅŸaÄŸÄ± bakÄ±ÅŸ)

OpenGLâ€™e bir view matrix gÃ¶nderilir

Shader Ã¼zerinden gÃ¶rÃ¼ntÃ¼ oluÅŸturulur
pip install glfw pyrr PyOpenGL
FPS Kamera Ã–rneÄŸi
AÅŸaÄŸÄ±daki kodda:

KÃ¼p sahnesi var (dÃ¶nebilen nesneler de eklenebilir)

Kamera hareketleri mouse ve klavye ile yÃ¶netilir

OpenGL 3.3 kullanÄ±lÄ±r
"""
import glfw
from OpenGL.GL import *
from OpenGL.GL.shaders import compileProgram, compileShader
import numpy as np
import pyrr
from math import sin, cos, radians

# GLSL Shader'lar
VERTEX_SHADER = """
#version 330 core
layout(location = 0) in vec3 position;
uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
void main()
{
    gl_Position = projection * view * model * vec4(position, 1.0);
}
"""

FRAGMENT_SHADER = """
#version 330 core
out vec4 FragColor;
void main()
{
    FragColor = vec4(0.8, 0.2, 0.3, 1.0);
}
"""

# Kamera parametreleri
camera_pos = np.array([0.0, 0.0, 3.0], dtype=np.float32)
camera_front = np.array([0.0, 0.0, -1.0], dtype=np.float32)
camera_up = np.array([0.0, 1.0, 0.0], dtype=np.float32)

yaw = -90.0
pitch = 0.0
lastX, lastY = 400, 300
first_mouse = True

def mouse_callback(window, xpos, ypos):
    global yaw, pitch, lastX, lastY, first_mouse, camera_front

    if first_mouse:
        lastX = xpos
        lastY = ypos
        first_mouse = False

    xoffset = xpos - lastX
    yoffset = lastY - ypos
    lastX = xpos
    lastY = ypos

    sensitivity = 0.1
    xoffset *= sensitivity
    yoffset *= sensitivity

    yaw += xoffset
    pitch += yoffset
    pitch = max(-89.0, min(89.0, pitch))

    front = np.array([
        cos(radians(yaw)) * cos(radians(pitch)),
        sin(radians(pitch)),
        sin(radians(yaw)) * cos(radians(pitch))
    ], dtype=np.float32)

    global camera_front
    camera_front = front / np.linalg.norm(front)

def process_input(window):
    global camera_pos
    camera_speed = 0.05
    if glfw.get_key(window, glfw.KEY_W) == glfw.PRESS:
        camera_pos[:] += camera_speed * camera_front
    if glfw.get_key(window, glfw.KEY_S) == glfw.PRESS:
        camera_pos[:] -= camera_speed * camera_front
    if glfw.get_key(window, glfw.KEY_A) == glfw.PRESS:
        right = np.cross(camera_front, camera_up)
        camera_pos[:] -= camera_speed * right / np.linalg.norm(right)
    if glfw.get_key(window, glfw.KEY_D) == glfw.PRESS:
        right = np.cross(camera_front, camera_up)
        camera_pos[:] += camera_speed * right / np.linalg.norm(right)

def main():
    if not glfw.init():
        return

    window = glfw.create_window(800, 600, "FPS Kamera - OpenGL", None, None)
    glfw.make_context_current(window)
    glfw.set_cursor_pos_callback(window, mouse_callback)
    glfw.set_input_mode(window, glfw.CURSOR, glfw.CURSOR_DISABLED)

    shader = compileProgram(
        compileShader(VERTEX_SHADER, GL_VERTEX_SHADER),
        compileShader(FRAGMENT_SHADER, GL_FRAGMENT_SHADER)
    )

    cube = [
        -0.5, -0.5, -0.5,
         0.5, -0.5, -0.5,
         0.5,  0.5, -0.5,
        -0.5,  0.5, -0.5,
        -0.5, -0.5,  0.5,
         0.5, -0.5,  0.5,
         0.5,  0.5,  0.5,
        -0.5,  0.5,  0.5
    ]

    indices = [
        0, 1, 2, 2, 3, 0,
        4, 5, 6, 6, 7, 4,
        0, 4, 7, 7, 3, 0,
        1, 5, 6, 6, 2, 1,
        3, 2, 6, 6, 7, 3,
        0, 1, 5, 5, 4, 0
    ]

    vertices = np.array(cube, dtype=np.float32)
    indices = np.array(indices, dtype=np.uint32)

    VAO = glGenVertexArrays(1)
    VBO = glGenBuffers(1)
    EBO = glGenBuffers(1)

    glBindVertexArray(VAO)
    glBindBuffer(GL_ARRAY_BUFFER, VBO)
    glBufferData(GL_ARRAY_BUFFER, vertices.nbytes, vertices, GL_STATIC_DRAW)

    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO)
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.nbytes, indices, GL_STATIC_DRAW)

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, None)
    glEnableVertexAttribArray(0)

    glEnable(GL_DEPTH_TEST)

    while not glfw.window_should_close(window):
        process_input(window)
        glClearColor(0.1, 0.1, 0.1, 1)
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

        glUseProgram(shader)

        model = pyrr.matrix44.create_identity(dtype=np.float32)
        view = pyrr.matrix44.create_look_at(camera_pos, camera_pos + camera_front, camera_up)
        projection = pyrr.matrix44.create_perspective_projection_matrix(45, 800 / 600, 0.1, 100)

        glUniformMatrix4fv(glGetUniformLocation(shader, "model"), 1, GL_FALSE, model)
        glUniformMatrix4fv(glGetUniformLocation(shader, "view"), 1, GL_FALSE, view)
        glUniformMatrix4fv(glGetUniformLocation(shader, "projection"), 1, GL_FALSE, projection)

        glBindVertexArray(VAO)
        glDrawElements(GL_TRIANGLES, len(indices), GL_UNSIGNED_INT, None)

        glfw.swap_buffers(window)
        glfw.poll_events()

    glfw.terminate()

if __name__ == "__main__":
    main()
#-----------------------------------------------------------------------------------------
#Åžimdi seni Ä±ÅŸÄ±klandÄ±rmalÄ± bir OpenGL sahnesiyle tanÄ±ÅŸtÄ±rÄ±yorum â€” burada gerÃ§ek zamanlÄ± olarak bir kÃ¼p Ã¼zerine ambient, diffuse ve specular (parlama) Ä±ÅŸÄ±k hesaplamalarÄ± yapÄ±lacak.Phong AydÄ±nlatma Modeli Nedir?
"""IÅŸÄ±klandÄ±rma Ã¼Ã§ parÃ§adan oluÅŸur:

Ambient Light: Ortam Ä±ÅŸÄ±ÄŸÄ±, her zaman gÃ¶rÃ¼lÃ¼r.

Diffuse Light: IÅŸÄ±ÄŸÄ±n geliÅŸ yÃ¶nÃ¼yle yÃ¼zey normali arasÄ±ndaki aÃ§Ä±ya gÃ¶re belirir.

Specular Light: GÃ¶zle Ä±ÅŸÄ±k yansÄ±ma yÃ¶nÃ¼nÃ¼n benzerliÄŸiyle parlama efekti."""

"""pip install glfw PyOpenGL pyrr
AÅŸaÄŸÄ±daki kod:

KÃ¼p nesnesi Ã§izer

Bir Ä±ÅŸÄ±k kaynaÄŸÄ±nÄ± sahneye koyar

Shader iÃ§inde Phong Ä±ÅŸÄ±klandÄ±rma uygular"""

import glfw
from OpenGL.GL import *
from OpenGL.GL.shaders import compileProgram, compileShader
import numpy as np
import pyrr

vertex_src = """
#version 330 core
layout(location = 0) in vec3 a_position;
layout(location = 1) in vec3 a_normal;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

out vec3 FragPos;
out vec3 Normal;

void main()
{
    FragPos = vec3(model * vec4(a_position, 1.0));
    Normal = mat3(transpose(inverse(model))) * a_normal;

    gl_Position = projection * view * vec4(FragPos, 1.0);
}
"""

fragment_src = """
#version 330 core
in vec3 FragPos;
in vec3 Normal;

out vec4 FragColor;

uniform vec3 lightPos;
uniform vec3 viewPos;
uniform vec3 lightColor;
uniform vec3 objectColor;

void main()
{
    // Ambient
    float ambientStrength = 0.2;
    vec3 ambient = ambientStrength * lightColor;

    // Diffuse
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;

    // Specular
    float specularStrength = 0.5;
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * lightColor;

    vec3 result = (ambient + diffuse + specular) * objectColor;
    FragColor = vec4(result, 1.0);
}
"""

# KÃ¼p verisi (pozisyon + normal)
vertices = [
    # positions        # normals
    -0.5,-0.5,-0.5,    0.0, 0.0,-1.0,
     0.5,-0.5,-0.5,    0.0, 0.0,-1.0,
     0.5, 0.5,-0.5,    0.0, 0.0,-1.0,
     0.5, 0.5,-0.5,    0.0, 0.0,-1.0,
    -0.5, 0.5,-0.5,    0.0, 0.0,-1.0,
    -0.5,-0.5,-0.5,    0.0, 0.0,-1.0,

    -0.5,-0.5, 0.5,    0.0, 0.0, 1.0,
     0.5,-0.5, 0.5,    0.0, 0.0, 1.0,
     0.5, 0.5, 0.5,    0.0, 0.0, 1.0,
     0.5, 0.5, 0.5,    0.0, 0.0, 1.0,
    -0.5, 0.5, 0.5,    0.0, 0.0, 1.0,
    -0.5,-0.5, 0.5,    0.0, 0.0, 1.0,

    -0.5, 0.5, 0.5,   -1.0, 0.0, 0.0,
    -0.5, 0.5,-0.5,   -1.0, 0.0, 0.0,
    -0.5,-0.5,-0.5,   -1.0, 0.0, 0.0,
    -0.5,-0.5,-0.5,   -1.0, 0.0, 0.0,
    -0.5,-0.5, 0.5,   -1.0, 0.0, 0.0,
    -0.5, 0.5, 0.5,   -1.0, 0.0, 0.0,

     0.5, 0.5, 0.5,    1.0, 0.0, 0.0,
     0.5, 0.5,-0.5,    1.0, 0.0, 0.0,
     0.5,-0.5,-0.5,    1.0, 0.0, 0.0,
     0.5,-0.5,-0.5,    1.0, 0.0, 0.0,
     0.5,-0.5, 0.5,    1.0, 0.0, 0.0,
     0.5, 0.5, 0.5,    1.0, 0.0, 0.0,

    -0.5,-0.5,-0.5,    0.0,-1.0, 0.0,
     0.5,-0.5,-0.5,    0.0,-1.0, 0.0,
     0.5,-0.5, 0.5,    0.0,-1.0, 0.0,
     0.5,-0.5, 0.5,    0.0,-1.0, 0.0,
    -0.5,-0.5, 0.5,    0.0,-1.0, 0.0,
    -0.5,-0.5,-0.5,    0.0,-1.0, 0.0,

    -0.5, 0.5,-0.5,    0.0, 1.0, 0.0,
     0.5, 0.5,-0.5,    0.0, 1.0, 0.0,
     0.5, 0.5, 0.5,    0.0, 1.0, 0.0,
     0.5, 0.5, 0.5,    0.0, 1.0, 0.0,
    -0.5, 0.5, 0.5,    0.0, 1.0, 0.0,
    -0.5, 0.5,-0.5,    0.0, 1.0, 0.0,
]

vertices = np.array(vertices, dtype=np.float32)

def main():
    if not glfw.init():
        return
    window = glfw.create_window(800, 600, "IÅŸÄ±klandÄ±rmalÄ± KÃ¼p", None, None)
    glfw.make_context_current(window)

    shader = compileProgram(
        compileShader(vertex_src, GL_VERTEX_SHADER),
        compileShader(fragment_src, GL_FRAGMENT_SHADER)
    )

    VAO = glGenVertexArrays(1)
    VBO = glGenBuffers(1)

    glBindVertexArray(VAO)
    glBindBuffer(GL_ARRAY_BUFFER, VBO)
    glBufferData(GL_ARRAY_BUFFER, vertices.nbytes, vertices, GL_STATIC_DRAW)

    # Pozisyon
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * 4, ctypes.c_void_p(0))
    glEnableVertexAttribArray(0)
    # Normal
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * 4, ctypes.c_void_p(12))
    glEnableVertexAttribArray(1)

    glEnable(GL_DEPTH_TEST)

    while not glfw.window_should_close(window):
        glfw.poll_events()
        glClearColor(0.1, 0.1, 0.1, 1)
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

        glUseProgram(shader)

        # Uniformlar
        model = pyrr.matrix44.create_identity()
        view = pyrr.matrix44.create_look_at([2, 2, 3], [0, 0, 0], [0, 1, 0])
        projection = pyrr.matrix44.create_perspective_projection_matrix(45, 800/600, 0.1, 100)

        glUniformMatrix4fv(glGetUniformLocation(shader, "model"), 1, GL_FALSE, model)
        glUniformMatrix4fv(glGetUniformLocation(shader, "view"), 1, GL_FALSE, view)
        glUniformMatrix4fv(glGetUniformLocation(shader, "projection"), 1, GL_FALSE, projection)

        glUniform3f(glGetUniformLocation(shader, "lightPos"), 1.2, 1.0, 2.0)
        glUniform3f(glGetUniformLocation(shader, "viewPos"), 2, 2, 3)
        glUniform3f(glGetUniformLocation(shader, "lightColor"), 1.0, 1.0, 1.0)
        glUniform3f(glGetUniformLocation(shader, "objectColor"), 1.0, 0.5, 0.3)

        glBindVertexArray(VAO)
        glDrawArrays(GL_TRIANGLES, 0, len(vertices) // 6)

        glfw.swap_buffers(window)

    glfw.terminate()

if __name__ == "__main__":
    main()
#---------------------------------------------------------------------------------------




